{"version":3,"sources":["pages/LiveChart.js"],"names":["clientSocket","socketIOClient","process","keys","useStyles","makeStyles","theme","title","fontSize","fontWeight","margin","lineHeight","LiveChart","classes","useState","liveData","setLiveData","useEffect","emit","state","stoxData","on","data","callback","push","convertToJson","length","slice","error","console","loaded","args","intervalId","setInterval","getElement","clearInterval","stockChart","refresh","className","root","id","style","textAlign","height","primaryXAxis","valueType","majorGridLines","color","primaryYAxis","lineStyle","majorTickLines","width","indicatorType","seriesType","chartArea","border","zoomSettings","enableMouseWheelZooming","enablePinchZooming","enableSelectionZooming","mode","enableScrollbar","services","DateTime","StripLine","LineSeries","SplineSeries","Tooltip","CandleSeries","HiloOpenCloseSeries","HiloSeries","RangeAreaSeries","Trendlines","EmaIndicator","RsiIndicator","BollingerBands","TmaIndicator","MomentumIndicator","SmaIndicator","AtrIndicator","Zoom","Export","AccumulationDistributionIndicator","MacdIndicator","StochasticIndicator","dataSource","xName","yName","type"],"mappings":"+aAqCMA,EAAeC,IAAeC,gCAE9BC,EAAO,CAAC,IAAK,OAAQ,OAAQ,MAAO,QAAS,UAE7CC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,MAAO,CACLC,SAAU,GACVC,WAAY,IACZC,OAAQ,WACRC,WAAY,SAqIDC,UAjIf,WACE,IAAMC,EAAUT,IADG,EAEaU,mBAAS,IAFtB,mBAEZC,EAFY,KAEFC,EAFE,KAInBC,qBAAU,WACRjB,EAAakB,KAAK,MAAO,CAAEC,OAAO,IAElC,IAAMC,EAAW,GAcjB,OAbApB,EAAaqB,GAAG,QAAQ,SAAUC,EAAMC,GACtCH,EAASI,KAAKF,GACd,IAAIP,EAAWU,YAAcL,EAAUjB,GACnCY,EAASW,OAAS,KACpBX,EAAWA,EAASY,MAAMZ,EAASW,OAAS,GAAIX,EAASW,SAC3DV,EAAYD,GACZQ,EAAS,MAGXvB,EAAaqB,GAAG,SAAS,SAAUO,GACjCC,QAAQD,MAAM,UAAYA,MAGrB,kBAAM5B,EAAakB,KAAK,QAAS,CAAEC,OAAO,OAChD,IAEH,IAAMW,EAAS,SAACC,GACd,IACMC,EAAaC,aAAY,WACY,OAArCC,YAAW,sBACbC,cAAcH,GAEVD,EAAKK,YAAYL,EAAKK,WAAWC,YALjB,MA8F1B,OACE,6BAASC,UAAWzB,EAAQ0B,MAC1B,kBAAC,IAAD,KACE,wBAAID,UAAWzB,EAAQN,OAAvB,sBAtFAQ,GAAYA,EAASW,OAErB,kBAAC,IAAD,CACEc,GAAG,qBACHC,MAAO,CAAEC,UAAW,SAAUC,OAAQ,qBACtCb,OAAQA,EACRc,aAAc,CACZC,UAAW,WACXC,eAAgB,CAAEC,MAAO,gBAE3BC,aAAc,CACZC,UAAW,CAAEF,MAAO,eACpBG,eAAgB,CAAEH,MAAO,cAAeI,MAAO,IAEjDC,cAAe,GACfC,WAAY,GACZC,UAAW,CAAEC,OAAQ,CAAEJ,MAAO,IAC9BK,aAAc,CACZC,yBAAyB,EACzBC,oBAAoB,EACpBC,wBAAwB,EACxBC,KAAM,IACNC,iBAAiB,IAGnB,kBAAC,IAAD,CACEC,SAAU,CACRC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,IACAC,OAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,WAAYtE,EACZuE,MAAM,IACNC,MAAM,OACNC,KAAK,SAEP,kBAAC,IAAD,CACEH,WAAYtE,EACZuE,MAAM,IACNC,MAAM,OACNC,KAAK,SAEP,kBAAC,IAAD,CACEH,WAAYtE,EACZuE,MAAM,IACNC,MAAM,MACNC,KAAK,SAEP,kBAAC,IAAD,CACEH,WAAYtE,EACZuE,MAAM,IACNC,MAAM,QACNC,KAAK,WAMR","file":"static/js/6.a6ed0015.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { AppContainer } from \"components\";\nimport { convertToJson } from \"helper\";\nimport {\n  StockChartComponent,\n  StockChartSeriesCollectionDirective,\n  StockChartSeriesDirective,\n  Inject,\n  DateTime,\n  StripLine,\n  LineSeries,\n  SplineSeries,\n  CandleSeries,\n  HiloOpenCloseSeries,\n  HiloSeries,\n  RangeAreaSeries,\n  Trendlines,\n  Zoom,\n  Tooltip,\n} from \"@syncfusion/ej2-react-charts\";\nimport {\n  EmaIndicator,\n  RsiIndicator,\n  BollingerBands,\n  TmaIndicator,\n  MomentumIndicator,\n  SmaIndicator,\n  AtrIndicator,\n  AccumulationDistributionIndicator,\n  MacdIndicator,\n  StochasticIndicator,\n  Export,\n} from \"@syncfusion/ej2-react-charts\";\nimport { getElement } from \"@syncfusion/ej2-charts\";\n\nconst clientSocket = socketIOClient(process.env.REACT_APP_LIVE_CHART_ENDPOINT);\n\nconst keys = [\"x\", \"open\", \"high\", \"low\", \"close\", \"volume\"];\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    fontSize: 24,\n    fontWeight: 600,\n    margin: \"0 0 20px\",\n    lineHeight: 1.5,\n  },\n}));\n\nfunction LiveChart() {\n  const classes = useStyles();\n  const [liveData, setLiveData] = useState([]);\n\n  useEffect(() => {\n    clientSocket.emit(\"sub\", { state: true });\n\n    const stoxData = [];\n    clientSocket.on(\"data\", function (data, callback) {\n      stoxData.push(data);\n      let liveData = convertToJson(stoxData, keys);\n      if (liveData.length > 20)\n        liveData = liveData.slice(liveData.length - 20, liveData.length);\n      setLiveData(liveData);\n      callback(1);\n    });\n\n    clientSocket.on(\"error\", function (error) {\n      console.error(\"Error: \" + error);\n    });\n\n    return () => clientSocket.emit(\"unsub\", { state: false });\n  }, []);\n\n  const loaded = (args) => {\n    const setTimeoutValue = 100;\n    const intervalId = setInterval(() => {\n      if (getElement(\"stockchartplotline\") === null) {\n        clearInterval(intervalId);\n      } else {\n        if (args.stockChart) args.stockChart.refresh();\n      }\n    }, setTimeoutValue);\n  };\n\n  const chart = () => {\n    if (liveData && liveData.length) {\n      return (\n        <StockChartComponent\n          id=\"stockchartplotline\"\n          style={{ textAlign: \"center\", height: \"calc(100% - 20px)\" }}\n          loaded={loaded}\n          primaryXAxis={{\n            valueType: \"DateTime\",\n            majorGridLines: { color: \"transparent\" },\n          }}\n          primaryYAxis={{\n            lineStyle: { color: \"transparent\" },\n            majorTickLines: { color: \"transparent\", width: 0 },\n          }}\n          indicatorType={[]}\n          seriesType={[]}\n          chartArea={{ border: { width: 0 } }}\n          zoomSettings={{\n            enableMouseWheelZooming: true,\n            enablePinchZooming: true,\n            enableSelectionZooming: true,\n            mode: \"X\",\n            enableScrollbar: true,\n          }}\n        >\n          <Inject\n            services={[\n              DateTime,\n              StripLine,\n              LineSeries,\n              SplineSeries,\n              Tooltip,\n              CandleSeries,\n              HiloOpenCloseSeries,\n              HiloSeries,\n              RangeAreaSeries,\n              Trendlines,\n              EmaIndicator,\n              RsiIndicator,\n              BollingerBands,\n              TmaIndicator,\n              MomentumIndicator,\n              SmaIndicator,\n              AtrIndicator,\n              Zoom,\n              Export,\n              AccumulationDistributionIndicator,\n              MacdIndicator,\n              StochasticIndicator,\n            ]}\n          />\n          <StockChartSeriesCollectionDirective>\n            <StockChartSeriesDirective\n              dataSource={liveData}\n              xName=\"x\"\n              yName=\"open\"\n              type=\"Line\"\n            ></StockChartSeriesDirective>\n            <StockChartSeriesDirective\n              dataSource={liveData}\n              xName=\"x\"\n              yName=\"high\"\n              type=\"Line\"\n            ></StockChartSeriesDirective>\n            <StockChartSeriesDirective\n              dataSource={liveData}\n              xName=\"x\"\n              yName=\"low\"\n              type=\"Line\"\n            ></StockChartSeriesDirective>\n            <StockChartSeriesDirective\n              dataSource={liveData}\n              xName=\"x\"\n              yName=\"close\"\n              type=\"Line\"\n            ></StockChartSeriesDirective>\n          </StockChartSeriesCollectionDirective>\n        </StockChartComponent>\n      );\n    }\n    return <p>Loading...</p>;\n  };\n\n  return (\n    <section className={classes.root}>\n      <AppContainer>\n        <h1 className={classes.title}> Upstox Live Chart</h1>\n        {chart()}\n      </AppContainer>\n    </section>\n  );\n}\n\nexport default LiveChart;\n"],"sourceRoot":""}